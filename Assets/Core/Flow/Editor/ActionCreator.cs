using UnityEngine;
using UnityEditor;
using System.IO;
using Flow;

/// <summary>
/// Creates an autogenerated action via the asset context menu
/// </summary>
public class ActionCreator : EditorWindow
{
  static string FileFolderPath;
  static string Name;

  [MenuItem("Assets/Create/Flow/Add FlowAction", false, 9999)]
  static void Init()
  {
    FileFolderPath = GetAssetPath();
    ActionCreator window = CreateInstance<ActionCreator>();
    window.position = new Rect(Screen.width / 2, Screen.height / 2, Screen.width, 100);
    window.ShowUtility();
  }

  void OnGUI()
  {

    GUILayout.Space(10);
    EditorGUILayout.LabelField("Enter the action name and click Create.", EditorStyles.wordWrappedLabel);
    GUILayout.Space(10);
    GUI.SetNextControlName("Name");
    Name = EditorGUILayout.TextField("Name: ", Name);
    GUILayout.Space(10);

    GUI.FocusControl("Name");

    if (Event.current.keyCode == KeyCode.Return) OnCreate(this);
    if (GUILayout.Button("Create")) OnCreate(this);
    if (GUILayout.Button("Cancel")) Close();
  }


  static void OnCreate(ActionCreator instnace)
  {
    if (Name == null) throw new MissingComponentException("Name was not given!");
    string FilePath = $"{FileFolderPath}/{Name}Action.cs";
    if (File.Exists(FilePath))
    {
      int option = EditorUtility.DisplayDialogComplex("Action already exists!",
          "Do you want to overwrite it?",
          "Yes, do it!",
          "Cancel",
          "");

      if (option == 0)
      {
        CreateFile(FilePath);
        instnace.Close();
      }
    }
    else
    {
      CreateFile(FilePath);
      instnace.Close();
    }
  }

  static void CreateFile(string FilePath)
  {
    File.WriteAllText(FilePath, GetTemplate(UCFirst(Name)));
    AssetDatabase.ImportAsset(FilePath, ImportAssetOptions.ForceUpdate);
    Flow.Logger.Log($"Created {FilePath}..");
  }


  static string GetAssetPath()
  {
    string defaultPath = "Assets/FlowActions";
    var obj = Selection.activeObject;
    if (obj == null) return defaultPath;

    string path = AssetDatabase.GetAssetPath(obj.GetInstanceID());
    if (path.Length > 0 && Directory.Exists(path)) return path;

    return defaultPath;
  }

  static string UCFirst(string s)
  {
    // Check for empty string.
    if (string.IsNullOrEmpty(s))
    {
      return string.Empty;
    }
    // Return char and concat substring.
    return char.ToUpper(s[0]) + s.Substring(1);
  }

  static string GetTemplate(string Name)
  {
    return $@"/// autogenerated {Name} FlowAction, most likely needs manual adjustment...

using Flow.Shared;
using UnityEngine;
using UnityEngine.Events;

namespace Flow.Actions
{{

  /// <summary>Package data definition for data sent by the client.<summary>
  public class {Name}FlowClientPackage
  {{
    public int ExampleValueA {{ get; set; }}
    public int ExampleValueB {{ get; set; }}
  }}

  /// <summary>Package data definition for data sent by the server.<summary>
  public class {Name}FlowServerPackage
  {{
    public int ExampleValueC {{ get; set; }}
    public int ExampleValueD {{ get; set; }}
  }}

  /// <summary>Handles packages on the client.<summary>
  public class {Name}FlowClientAction : FlowAction
  {{

    /// <summary>Action to handle multiple events when a package is received.<summary>
    public UnityAction<{Name}FlowServerPackage> OnPackageReceive;

    /// <summary>Subscribes server packages on the client.<summary>
    public override void SubscribePackage()
    {{
      processor.SubscribeReusable<{Name}FlowServerPackage>(Handle);
    }}

    /// <summary>Handles a server package on the client.<summary>
    private void Handle({Name}FlowServerPackage package)
    {{
      if (OnPackageReceive != null) OnPackageReceive.Invoke(package);

      Debug.Log(package.ExampleValueC);
      Debug.Log(package.ExampleValueD);
    }}

    /// <summary>Sends the client package to the server.<summary>
    public void Send(int _ExampleValueA, int _ExampleValueB)
    {{
      SendPackage(new {Name}FlowClientPackage()
      {{
        ExampleValueA = _ExampleValueA,
        ExampleValueB = _ExampleValueB,
      }}).Send(SendMethod.ReliableOrdered);
    }}
  }}


  /// <summary>Handles packages on the server.<summary>
  public class {Name}FlowServerAction : FlowAction
  {{

    /// <summary>Action to handle multiple events when a package is received.<summary>
    public UnityAction<{Name}FlowClientPackage> OnPackageReceive;

    /// <summary>Subscribes client packages on the Server.<summary>
    public override void SubscribePackage()
    {{
      processor.SubscribeReusable<{Name}FlowClientPackage>(Handle);
    }}

    /// <summary>Handles a client package on the server.<summary>
    private void Handle({Name}FlowClientPackage package)
    {{
      if (OnPackageReceive != null) OnPackageReceive.Invoke(package);

      Debug.Log(package.ExampleValueA);
      Debug.Log(package.ExampleValueB);
    }}

    /// <summary>Sends the server package to the client(s).<summary>
    public void Send(int _clientId, int _ExampleValueC, int _ExampleValueD)
    {{
      SendPackage(new {Name}FlowServerPackage()
      {{
        ExampleValueC = _ExampleValueC,
        ExampleValueD = _ExampleValueD,
      }}).Send(SendMethod.ReliableOrdered, _clientId);
    }}
  }}
}}
    ";

  }
}