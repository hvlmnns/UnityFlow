/// autogenerated Spawn FlowAction, most likely needs manual adjustment...

using UnityEngine;
using Client;
using Server;


namespace Flow.Actions
{
  /// <summary>Package data definition for data sent by the Server.<summary>
  public class SpawnFlowServerPackage
  {
    public int clientId { get; set; }
    public Vector3 position { get; set; }
    public Quaternion rotation { get; set; }
  }

  /// <summary>Handles packages on the client.<summary>
  public class SpawnFlowClientAction : FlowAction
  {

    /// <summary>Subscribes server packages on the client.<summary>
    public override void SubscribePackage()
    {
      processor.SubscribeReusable<SpawnFlowServerPackage>(Handle);
    }

    /// <summary>Handles a server package on the client.<summary>
    private void Handle(SpawnFlowServerPackage package)
    {
      if (package.clientId == FlowClient.id)
      {
        GameObject prefab = Instantiate(References.defaults.PLAYER_PREFAB, package.position, package.rotation); ;
        ClientPlayerManager.AddPlayerPrefab(prefab);
      }
      else
      {
        GameObject prefab = Instantiate(References.defaults.ENEMY_PREFAB, package.position, package.rotation);
        ClientPlayerManager.AddEnemyPrefab(prefab, package.clientId);
      }
    }
  }


  /// <summary>Handles packages on the server.<summary>
  public class SpawnFlowServerAction : FlowAction
  {

    /// <summary>Subscribes client packages on the Server.<summary>
    public override void SubscribePackage()
    {
      // no need for a client package handler here
    }

    /// <summary>Sends the server package to the client(s).<summary>
    public void Send(int _clientId, Vector3 _position, Quaternion _rotation)
    {
      GameObject prefab = Instantiate(References.defaults.SERVER_PLAYER_PREFAB, _position, _rotation);
      ServerPlayerManager.AddPlayerPrefab(prefab, _clientId);

      // spawn new client onn all existing clients
      SendPackage(new SpawnFlowServerPackage()
      {
        clientId = _clientId,
        position = _position,
        rotation = _rotation
      }).SendAll(SendMethod.ReliableOrdered);

      // spawn already existing clients on the newly connected client
      FlowServer.IterateConnectedClients((FlowClientServer client) =>
      {
        if (client.id != _clientId)
        {
          SendPackage(new SpawnFlowServerPackage()
          {
            clientId = client.id,
            position = _position,
            rotation = _rotation
          }).Send(SendMethod.ReliableOrdered, _clientId);
        }
        return true;
      });

    }
  }
}
