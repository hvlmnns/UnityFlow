/// autogenerated Disconnect FlowAction, most likely needs manual adjustment...

using Flow.Shared;
using Flow.Server;
using Client;
using Server;

namespace Flow.Actions
{

  /// <summary>Package data definition for data sent by the client.<summary>
  public class DisconnectFlowServerPackage
  {
    public int clientId { get; set; }
    public string message { get; set; }
  }

  /// <summary>Handles packages on the client.<summary>
  public class DisconnectFlowClientAction : FlowAction
  {

    /// <summary>Subscribes server packages on the client.<summary>
    public override void SubscribePackage()
    {
      processor.SubscribeReusable<DisconnectFlowServerPackage>(Handle);
    }

    /// <summary>Handles a server package on the client.<summary>
    private void Handle(DisconnectFlowServerPackage package)
    {
      Logger.Log(package.message);
      if (package.clientId == FlowClientLocal.id)
      {
        ClientPlayerManager.RemovePlayerPrefab();
      }
      else
      {
        ClientPlayerManager.RemoveEnemyPrefab(package.clientId);
      }
    }
  }


  /// <summary>Handles packages on the server.<summary>
  public class DisconnectFlowServerAction : FlowAction
  {
    /// <summary>Sends the server package to the client(s).<summary>
    public void Send(int _clientId)
    {
      ServerPlayerManager.RemovePlayerPrefab(_clientId);

      SendPackage(new DisconnectFlowServerPackage()
      {
        clientId = _clientId,
        message = $"Client ({_clientId}) has disconnected.",
      }).SendExcept(SendMethod.ReliableUnordered, new int[] { _clientId });
    }
  }
}
